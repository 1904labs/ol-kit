import ugh from 'ugh'

/**
 * Generate a 2D array of features paired to a style representing how they are currently styled on the map.
 * OpenLayers Features will inherit the style set on their parent layer if their own style is undefined.  This Function helps resolve the style that is actually being used to render the feature on the map.
 * @function getStyledFeatures
 * @param {Object[]} layers - The Openlayers Layers you want to get the features from.
 * @param {Number} [resolution] - The map's current resolution.
 */
export function getStyledFeatures (layers, resolution) {
  const layerStyleMapper = (layer) => { // this function returns the features in a layer with the layer's style function, returning [[features], layerStyleFunction]
    const layerStyle = layer.getStyleFunction()

    // This function needs to handle each type of layer differently so these conditionals check the type of layer
    if (typeof layer?.getSource?.()?.getFeatures === 'function') { // handle an OpenLayers vector layer (with a vector source)
      const source = layer.getSource()
      const sourceFeatures = source.getFeatures()

      return [sourceFeatures, layerStyle]
    } else if (layer.isCatalogLayer) { // handle a vmf CatalogLayer
      const source = layer.getWfsSource()
      const sourceFeatures = source.getFeatures()

      return [sourceFeatures, layerStyle]
    } // we may need to eventually handle GeoserverLayers here...
  }
  const featuresReducer = (acc, [features, layerStyleFunction]) => { // This function reduces [[[features], layerStyleFunction], ...] to [[feature1, featureStyle1], [feature2, featureStyle2], ...]
    const featureStyleMapper = (feature, idx) => {
      // Try every avenue for getting the style from the feature itself since that style will override the layer's style.
      const featureStyleFunction = feature.getStyleFunction()
      const featureStyle = typeof featureStyleFunction === 'function'
        ? featureStyleFunction.call(feature, resolution) // eslint-disable-line no-useless-call // This isn't actually a useless call and I don't know why eslint doesn't like it.
        : feature.getStyle()

      if (featureStyle || !layerStyleFunction) { // If we have a valid style from the feature we use that.  This is an or because if we don't have a style from the feature or the layer than we return it as undefined.
        return [feature, featureStyle]
      } else { // try to call the layerStyleFunction with the expected parameters and use that style.
        try {
          const generatedStyle = layerStyleFunction.bind(this, feature, resolution)()

          return [feature, generatedStyle]
        } catch (error) { // we've failed to resolve the feature's style and return undefined as the style.
          ugh.warn(`Geokit was unable to get the style object for feature at index ${idx} from it's layer's style function due to the following error.`, error)

          return [feature, undefined]
        }
      }
    }
    const associatedPairs = features.map(featureStyleMapper)

    return [...acc, ...associatedPairs]
  }
  const styledLayers = layers.filter(layer => typeof layer.getStyle === 'function')
  // get the features for each layer in a 2d array paired with the style function associated with that layer
  const featuresAndStyles = styledLayers.map(layerStyleMapper)
  // get a 2d array of each feature paired with the either the style set directly on the feature OR the style generated by the parent layer's style function called with that feature and the (optional) resolution as arguments.
  const featureStyles = featuresAndStyles.reduce(featuresReducer, [])

  return featureStyles
}
